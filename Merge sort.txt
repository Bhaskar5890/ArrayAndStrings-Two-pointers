public class Solution {
    public int[] SortArray(int[] nums) 
    {
        if(nums.Length == 0 || nums.Length == 1)
        {
            return nums;
        }
        
          var start = 0;
          var end = nums.Length - 1;

          var mid = (start + end) / 2;
          int[] left = new int[mid + 1];
          int[] right = new int[nums.Length - (mid+1)];

          for (int i = start; i <= mid; i++)
          {
            left[i] = nums[i];
          }

          for (int i = mid + 1; i <= end; i++)
          {
            right[i - (mid+1)] = nums[i];
          }

          SortArray(left);
          SortArray(right);

          Merge(nums, left, right);
        
        return nums;
    }
    
    public void Merge(int[] nums, int[] left, int[] right)
    {
        int i = 0;
        int j = 0;
        int k = 0;
        
        while(i < left.Length && j < right.Length)
        {
            if(left[i] < right[j])
            {
                nums[k] = left[i];
                i++;
                k++;
            }
            else
            {
                nums[k] = right[j];
                j++;
                k++;
            }
        }
        
        while(i < left.Length)
        {
            nums[k] = left[i];
            i++;
            k++;
        }
        
        while(j < right.Length)
        {
            nums[k] = right[j];
            j++;
            k++;
        }
    }
}